#!/usr/bin/env bash

#
# PID
#
cache_path=$HOME/.cache/idlelock.sh
pid_file=$cache_path/pid
mkdir -p $HOME/.cache/idlelock.sh
[[ -f $pid_file ]] && kill $(<$pid_file)
trap "rm -f $pid_file" EXIT INT TERM
echo $$ > $cache_path/pid



#
# Setting
#
if [[ $HOSTNAME == 'pc' ]]; then
	# NOTIFY_SECONDS=120
	NOTIFY_SECONDS=5
	SCREEN_OFF_SECONDS=140
	LOCK_SECONDS=160
	SLEEP_SECONDS=300
	NETWORK_DEVICE=enp5s0
	NOTIFY_BRIGHTNESS=50
else
	NOTIFY_SECONDS=60
	SCREEN_OFF_SECONDS=80
	LOCK_SECONDS=100
	SLEEP_SECONDS=240
	NETWORK_DEVICE=wlp2s0
	NOTIFY_BRIGHTNESS=20
fi



#
# idlelock.sh
#
exec idlelock.sh \
	--lock-on-sleep \
	--inhibit 'fullscreen' \
	--inhibit "pause $HOME/.cache/idlelock.sh/pause" \
	--unlock-cmd 'pkill i3lock' \
	\
	`# Restore screen to full brightness on user activity.` \
	--restore-cmd '/usr/share/idlelock.sh/set-brightness.sh restore' \
	\
	`# Notify user of inactivity by dimming the screen.` \
	--timer $NOTIFY_SECONDS \
		+command "/usr/share/idlelock.sh/set-brightness.sh $NOTIFY_BRIGHTNESS" \
	\
	`# Turn the screen off 20 seconds later.` \
	--timer $SCREEN_OFF_SECONDS \
		+command 'xset dpms force off' \
	\
	`# Run the screen locker 40 seconds after turning the screen off.` \
	--timer $LOCK_SECONDS \
		+command 'pgrep -x i3lock || besterlockscreen -l' \
		+primary \
	\
	`# Suspend the system after 5 total minutes of inactivity.` \
	--timer $SLEEP_SECONDS \
		+command 'systemctl suspend' \
		+restore 'sleep 1 && xset dpms force on' `# Turn screen on after system resumes.` \
		+inhibit "network $NETWORK_DEVICE 1000" `# Do not sleep when network is busy at 1Mbps.` \
		+inhibit 'cpu 2' `# Do not sleep when CPU is busy.` \
		+repeat `# Retry every 300 seconds of inactivity even after inhibited.`
